<?php 

class VirtualAttributeHelper
{
	public static function Compute($domain_id, $vendor_id, $moc_id)
	{
		ini_set('memory_limit', '4096M');
		ini_set('max_execution_time', '-1');

		$start_time = time();

		$resp = new stdClass;
		$resp->success = true;
		$resp->message = "";

		try
		{
			$kpi_lkp = Yii::app()->params["kpi_lkp"];
			
			$domain_id = intval($domain_id);
			$vendor_id = intval($vendor_id);
			
			if ( !isset($kpi_lkp[$domain_id]) || !isset($kpi_lkp[$domain_id]["vendors"][$vendor_id]) )
			{
				throw new Exception('Invalid Vendor or Domain');
			}

			$kpi_lkp = Yii::app()->params["kpi_lkp"];

			$moc_list_all_lkp = array();
			foreach ($kpi_lkp as $domain_tid => $domain)
			{
				foreach ($domain["vendors"] as $vendor_tid => $vendor)
				{
					$moc_list_all_lkp [ "{$domain_tid}_{$vendor_tid}" ] = $kpi_lkp[$domain_tid]["vendors"][$vendor_tid]["moc"]["class"]::model()->findAll();
				}
			}

			$va_failed_mocs = array();

			$mmocs = $kpi_lkp[$domain_id]["vendors"][$vendor_id]["moc"]["class"]::model()->findAll(" id = $moc_id AND ( virtual_attributes IS NOT NULL OR name_configs IS NOT NULL ) ");
			foreach ($mmocs as $mmoc)
			{
				$req_attrs = array();
				$tattrs = self::get_all_attributes( $mmoc, $moc_list_all_lkp["{$domain_id}_{$vendor_id}"] );
				foreach ($tattrs as $tattr => $tatrtype)
				{
					if( $tatrtype == 1 || $tatrtype == 4 )
						$req_attrs [$tattr] = $tattr;
				}

				$sdb = $kpi_lkp[$domain_id]["vendors"][$vendor_id]["schema_db"];
				$moctn = $kpi_lkp[$domain_id]["vendors"][$vendor_id]["moc"]["table"];
				$moitn = $kpi_lkp[$domain_id]["vendors"][$vendor_id]["moi"]["table"];

				$tmoc_resp = self::get_moc_attributes( $domain_id, $vendor_id, $mmoc->id, $moc_list_all_lkp, $req_attrs );
				$moc_status = array();

				$req_attr_siz = sizeof($req_attrs) - 4;

				if( $tmoc_resp["success"] )
				{
					if( sizeof($tmoc_resp["attr_dets"]) == 0  )
					{
						$tmois = Yii::app()->$sdb->createCommand("SELECT id, display_name, search_name, virtual_attributes_data FROM $moitn WHERE moc_id=".$mmoc->id."; " )->queryAll();

						$total = 0;
						$updated = 0;
						$no_change = 0;
						$data_found_full = 0;
						$data_found_partial = 0;
						$no_data_found = 0;

						foreach ($tmois as $tmoi)
						{
							$total++;
							if( isset( $tmoc_resp[ "moi_data" ][ $tmoi["id"] ] ) )
							{
								$upd_arr = array();
								$tmoi_ndata = $tmoc_resp[ "moi_data" ][ $tmoi["id"] ];

								if( isset($tmoi_ndata["sys_labels"]["SYSTEM_SEARCH_LABEL"]) && $tmoi_ndata["sys_labels"]["SYSTEM_SEARCH_LABEL"] != $tmoi["search_name"] )
								{
									$upd_arr ["search_name"] = $tmoi_ndata["sys_labels"]["SYSTEM_SEARCH_LABEL"];
								}

								if( isset($tmoi_ndata["sys_labels"]["SYSTEM_USER_LABEL"]) && $tmoi_ndata["sys_labels"]["SYSTEM_USER_LABEL"] != $tmoi["display_name"] )
								{
									$upd_arr ["display_name"] = $tmoi_ndata["sys_labels"]["SYSTEM_USER_LABEL"];
								}

								$vas = array();
								if( isset($tmoi["virtual_attributes_data"]) )
								{
									$vas = json_decode($tmoi["virtual_attributes_data"], true);
								}

								$df = 0;
								foreach ($tmoi_ndata["va_attrs"] as $key => $value)
								{
									if( $value != null )
									{
										$df++;
									}
								}

								$change = false;
								foreach ($tmoi_ndata["va_attrs"] as $key => $value)
								{
									if( isset($vas[$key]) )
									{
										if( $vas[$key] != $value )
										{
											$change = true;
											break;
										}
									}
									else
									{
										$change = true;
										break;
									}
								}

								if( !$change )
								{
									foreach ($vas as $key => $value)
									{
										if( isset($tmoi_ndata["va_attrs"][$key]) )
										{
											if( $tmoi_ndata["va_attrs"][$key] != $value )
											{
												$change = true;
												break;
											}
										}
										else
										{
											$change = true;
											break;
										}
									}
								}

								if( $req_attr_siz == $df )
								{
									$data_found_full++;
								}
								else if ( $req_attr_siz > $df && $df > 0 )
								{
									$data_found_partial++;
								}
								else if( $df == 0 )
								{
									$no_data_found++;
								}

								if( $change )
								{
									$upd_arr ["virtual_attributes_data"] = json_encode($tmoi_ndata["va_attrs"]);
								}
								else
								{
									$no_change++;
								}

								if( sizeof($upd_arr) > 0 )
								{
									$updated++;
									$inresp = Yii::app()->$sdb->createCommand()->update( $moitn, $upd_arr, " id = ".$tmoi["id"] );
									if( !$inresp )
									{
										$resp->success = false;
										$resp->message .= "MOC: ".$mmoc["id"].", MOI: ".$tmoi["id"]." Data Update Failed!";
										break;
									}
								}
							}
						}

						$moc_status ["success"] = true;
						$moc_status ["message"] = "Total: $total, Data-Found: ( Full: $data_found_full, Partial: $data_found_partial, NO: $no_data_found ) , Updated: $updated, No-change: $no_change, Operation Successfull.";
					}
					else
					{
						$moc_status ["success"] = false;
						$moc_status ["message"] = "Some Attributes Failed in Computation!";
						$moc_status ["attr_dets"] = $tmoc_resp["attr_dets"];
					}
				}
				else
				{
					$moc_status ["success"] = false;
					$moc_status ["message"] = $tmoc_resp["message"];

					$va_failed_mocs [ $mmoc["id"] ] = $tmoc_resp["message"];
				}

				$moc_status ["updated_at"] = date("Y-m-d H:i");

				$inresp = Yii::app()->$sdb->createCommand()->update( $moctn, array( "vattr_last_status" => json_encode($moc_status) ), " id = ".$mmoc["id"] );
				if( !$inresp )
				{
					$resp->success = false;
					$resp->message .= "MOC: ".$mmoc["id"]." Status Update Failed!";
					break;
				}

				unset($tmoc_resp);
			}

			if( sizeof($va_failed_mocs) > 0 )
			{
				$resp->success = false;
				$resp->message .= "VA_FAILED: ".json_encode($va_failed_mocs);
			}
		}
		catch( Exception $e )
		{
			$resp->success = false;
			$resp->message .= "Code: ".$e->getCode().", Message: ".$e->getMessage().", Trace: ".$e->getTraceAsString();
		}

		return $resp;
	}

	public static function get_moc_attributes( $domain_id, $vendor_id, $moc_id, $moc_list_all_lkp, $sel_attrs )
	{
		$moc_status = array(
			"success" => true,
			"message" => "",
			"attr_dets" => array(),
			"moi_data" => array(),
		);

		$domain_id = intval($domain_id);
		$vendor_id = intval($vendor_id);

		$kpi_lkp = Yii::app()->params["kpi_lkp"];

		$kpi_sec_lkps = Yii::app()->params["kpi_sec_lkps"];
		$kpi_intervals = $kpi_sec_lkps['kpi_intervals'];
		$kpi_types = $kpi_sec_lkps['kpi_types'];
		$aggr_functions = $kpi_sec_lkps['aggr_functions'];
		$kpi_units = $kpi_sec_lkps['kpi_units'];

		if ( !isset($kpi_lkp[$domain_id]) || !isset($kpi_lkp[$domain_id]["vendors"][$vendor_id]) )
		{
			$moc_status ["success"] = false;
			$moc_status ["message"] = "Invalid Integration: ({$domain_id}_{$vendor_id}_{$moc_id})!";
			return $moc_status;
		}

		$mmoc = $kpi_lkp[$domain_id]["vendors"][$vendor_id]["moc"]["class"]::model()->findByPk($moc_id);
		if( $mmoc == null )
		{
			$moc_status ["success"] = false;
			$moc_status ["message"] = "Invalid MOC: ({$domain_id}_{$vendor_id}_{$moc_id})!";
			return $moc_status;
		}

		$mmoc_attrs = self::get_all_attributes( $mmoc, $moc_list_all_lkp["{$domain_id}_{$vendor_id}"] );

		$mc_lkp = array();
		foreach ($moc_list_all_lkp["{$domain_id}_{$vendor_id}"] as $omoc)
		{
			if( !isset($mc_lkp[$omoc->id]) )
			{
				$mc_lkp[$omoc->id] = array(
					"name" => $omoc->name,
					"parent_id" => $omoc->parent_id,
					"fmoi" => $omoc,
				);
			}
		}

		$pmoc_path = array();
		if( $moc_id != null && isset($mc_lkp[$moc_id]) )
		{
			$pmoc_path[$moc_id] = array(
				"id" => $moc_id,
				"name" => $mc_lkp[$moc_id]["name"],
			);

			$parent_tlkf = $mc_lkp[$moc_id]["parent_id"];
			while ( $parent_tlkf != null && isset($mc_lkp[$parent_tlkf]) )
			{
				$pmoc_path[$parent_tlkf] = array(
					"id" => $parent_tlkf,
					"name" => $mc_lkp[$parent_tlkf]["name"],
				);
				$parent_tlkf = $mc_lkp[$parent_tlkf]["parent_id"];
			}
		}

		$cids_list = array();
		self::getmocsunder($mmoc, $moc_list_all_lkp["{$domain_id}_{$vendor_id}"], $cids_list);
		if( isset($cids_list[$mmoc->id]) )
		{
			unset($cids_list[$mmoc->id]);
		}
		
		$deps = array();
		$cm_raw = array();
		$bus_ref = array();
		$sys_lbls = array();
		$moi_parts = array();

		if( isset($sel_attrs["SYSTEM_MOI"]) )
		{
			$sys_lbls ["SYSTEM_MOI"] = "SYSTEM_MOI";
		}

		if( isset($sel_attrs["RAW_DATA_LABEL"]) )
		{
			$sys_lbls ["RAW_DATA_LABEL"] = "RAW_DATA_LABEL";
		}

		$vattrs = array();
		if( isset($mmoc->virtual_attributes) )
		{
			$vattrs = json_decode( $mmoc->virtual_attributes, true );
		}

		if( isset($mmoc->name_configs) )
		{
			$name_configs = json_decode( $mmoc->name_configs, true );

			if( isset($name_configs["search_template"]) && isset($name_configs["search_attr_arr"]) && isset($sel_attrs["SYSTEM_SEARCH_LABEL"]) )
			{
				$srch_attr = array();
				$srch_attr ["type"] = 6;
				$srch_attr ["search_template"] = $name_configs["search_template"];
				$srch_attr ["search_attr_arr"] = $name_configs["search_attr_arr"];

				$srch_attr_resp = self::va_attr_resp($srch_attr, $mc_lkp, $pmoc_path, $cids_list, $mmoc_attrs, $moc_list_all_lkp, $sel_attrs, $vattrs, $deps, $cm_raw, $bus_ref, $sys_lbls, $moi_parts, $domain_id, $vendor_id );
				if( !$srch_attr_resp->valid )
				{
					$moc_status ["attr_dets"]["SYSTEM_SEARCH_LABEL"] = array("lbl"=>"SYSTEM_SEARCH_LABEL", "moc_id"=>$mmoc->id, "error"=>$srch_attr_resp->message);
				}
				else
				{
					$sys_lbls ["SYSTEM_SEARCH_LABEL"] = "SYSTEM_SEARCH_LABEL";
				}
			}

			if( isset($name_configs["display_template"]) && isset($name_configs["display_attr_arr"]) && isset($sel_attrs["SYSTEM_USER_LABEL"]) )
			{
				$disp_attr = array();
				$disp_attr ["type"] = 7;
				$disp_attr ["display_template"] = $name_configs["display_template"];
				$disp_attr ["display_attr_arr"] = $name_configs["display_attr_arr"];

				$disp_attr_resp = self::va_attr_resp($disp_attr, $mc_lkp, $pmoc_path, $cids_list, $mmoc_attrs, $moc_list_all_lkp, $sel_attrs, $vattrs, $deps, $cm_raw, $bus_ref, $sys_lbls, $moi_parts, $domain_id, $vendor_id );
				if( !$disp_attr_resp->valid )
				{
					$moc_status ["attr_dets"]["SYSTEM_USER_LABEL"] = array("lbl"=>"SYSTEM_USER_LABEL", "moc_id"=>$mmoc->id, "error"=>$disp_attr_resp->message);
				}
				else
				{
					$sys_lbls ["SYSTEM_USER_LABEL"] = "SYSTEM_USER_LABEL";
				}
			}
		}

		if( isset($mmoc->parameter_labels) )
		{
			$pmlbls = json_decode($mmoc->parameter_labels, true);
			foreach ($pmlbls as $pmlbl)
			{
				if( isset($sel_attrs[$pmlbl]) )
				{
					$cm_raw [$pmlbl] = $pmlbl;
				}
			}
		}

		if( isset($mmoc->business_ref_labels) )
		{
			$brlbls = json_decode($mmoc->business_ref_labels, true);
			foreach ($brlbls as $br_key => $brlbl)
			{
				if( isset($sel_attrs[$brlbl]) )
				{
					$bus_ref [$brlbl] = $br_key;
				}
			}
		}

		foreach ($vattrs as $attrl => $attr)
		{
			if( isset($sel_attrs[$attrl]) )
			{
				$attr_resp = self::va_attr_resp($attr, $mc_lkp, $pmoc_path, $cids_list, $mmoc_attrs, $moc_list_all_lkp, $sel_attrs, $vattrs, $deps, $cm_raw, $bus_ref, $sys_lbls, $moi_parts, $domain_id, $vendor_id );
				if( !$attr_resp->valid )
				{
					$moc_status ["attr_dets"][$attrl] = array("lbl"=>$attrl, "moc_id"=>$mmoc->id, "error"=>$attr_resp->message);
				}
				else
				{
					$vattrs [$attrl] ["computed_populated"] = false;
				}
			}
		}

		$sel_moi_part = array();
		foreach ($pmoc_path as $pmc)
		{
			if( $pmc["name"] == "ems_data_source" )
			{
				if( isset($sel_attrs["SYSTEM_SOURCE_EMS"]) || isset($moi_parts["SYSTEM_SOURCE_EMS"]) )
				{
					$sel_moi_part ["SYSTEM_SOURCE_EMS"] = $pmc["name"];
				}
			}
			else
			{
				if( isset($sel_attrs["SYSTEM_MOIP_".$pmc["name"]]) || isset($moi_parts["SYSTEM_MOIP_".$pmc["name"]]) )
				{
					$sel_moi_part ["SYSTEM_MOIP_".$pmc["name"]] = $pmc["name"];
				}
			}
		}

		$raw_attrs = array();
		foreach ($cm_raw as $raw_attr)
		{
			$raw_attrs [] = " parameter_data->>'".$raw_attr."' as \"rcm_".strtolower($raw_attr)."\" ";
		}

		$br_attrs = array();
		foreach ($bus_ref as $bus_attr)
		{
			$br_attrs [] = " business_ref_data->>'".$bus_attr."' as \"bra_".strtolower($bus_attr)."\" ";
		}

		$raw_attr_sel = "";
		if( sizeof($raw_attrs) > 0 )
		{
			$raw_attr_sel = ", ".implode(", ", $raw_attrs);
		}

		$br_attr_sel = "";
		if( sizeof($br_attrs) > 0 )
		{
			$br_attr_sel = ", ".implode(", ", $br_attrs);
		}

		$sdb = $kpi_lkp[$domain_id]["vendors"][$vendor_id]["schema_db"];
		$moitn = $kpi_lkp[$domain_id]["vendors"][$vendor_id]["moi"]["table"];

		$lmois = Yii::app()->$sdb->createCommand("SELECT id, moi, user_label, moi_parts $raw_attr_sel $br_attr_sel FROM $moitn WHERE moc_id=".$mmoc->id."; " )->queryAll();

		foreach ($lmois as $lmoi)
		{
			$fmoi = array();
			$fmoi["id"] = $lmoi["id"];
			$fmoi["moi"] = $lmoi["moi"];
			$fmoi["user_label"] = $lmoi["user_label"];
			$fmoi["moi_parts"] = json_decode($lmoi["moi_parts"], true);

			$fmoi["sys_labels"] = array();
			if( isset($sys_lbls["SYSTEM_MOI"]) )
			{
				if( isset($lmoi["moi"]) )
				{
					$fmoi["sys_labels"]["SYSTEM_MOI"] = $lmoi["moi"];
				}
			}

			if( isset($sys_lbls["RAW_DATA_LABEL"]) )
			{
				if( isset($lmoi["user_label"]) )
				{
					$fmoi["sys_labels"]["RAW_DATA_LABEL"] = $lmoi["user_label"];
				}
			}

			$fmoi["raw_attrs"] = array();
			foreach ($cm_raw as $cm_attr)
			{
				if( isset($lmoi["rcm_".strtolower($cm_attr)]) )
				{
					$fmoi["raw_attrs"][$cm_attr] = $lmoi["rcm_".strtolower($cm_attr)];
				}
			}

			$fmoi["bus_attrs"] = array();
			foreach ($bus_ref as $bus_attr => $bus_dtak)
			{
				if( isset($lmoi["bra_".strtolower($bus_dtak)]) )
				{
					$fmoi["bus_attrs"][$bus_attr] = $lmoi["bra_".strtolower($bus_dtak)];
				}
			}

			$fmoi["moi_ps"] = array();
			foreach ($sel_moi_part as $moik => $moin)
			{
				if( isset($fmoi["moi_parts"][$moin]) )
				{
					$fmoi["moi_ps"][$moik] = $fmoi["moi_parts"][$moin];
				}
			}

			$fmoi["va_attrs"] = array();

			if( isset($sys_lbls["SYSTEM_SEARCH_LABEL"]) )
			{
				$fmoi["sys_labels"]["SYSTEM_SEARCH_LABEL"] = null;
			}

			if( isset($sys_lbls["SYSTEM_USER_LABEL"]) )
			{
				$fmoi["sys_labels"]["SYSTEM_USER_LABEL"] = null;
			}

			$moc_status["moi_data"][ $lmoi["id"] ] = $fmoi;
		}

		foreach ($deps as $dmk => $dep_mdets)
		{
			$tmoc_resp = self::get_moc_attributes( $dep_mdets["domain_id"], $dep_mdets["vendor_id"], $dep_mdets["moc_id"], $moc_list_all_lkp, $dep_mdets["attrs"] );
			if( $tmoc_resp["success"] )
			{
				$deps [$dmk] ["attr_dets"] = $tmoc_resp["attr_dets"];
				$deps [$dmk] ["moi_data"] = $tmoc_resp["moi_data"];
			}
			else
			{
				break;
				$moc_status ["success"] = false;
				$moc_status ["message"] = "Integration MOC Failed: ".$tmoc_resp["message"];
				return $moc_status;
			}
		}

		if( isset($mmoc->name_configs) )
		{
			$name_configs = json_decode( $mmoc->name_configs, true );

			if( isset($name_configs["search_template"]) && isset($name_configs["search_attr_arr"]) && isset($sel_attrs["SYSTEM_SEARCH_LABEL"]) && !isset($moc_status["attr_dets"]["SYSTEM_SEARCH_LABEL"]) )
			{
				$srch_attr = array();
				$srch_attr ["type"] = 6;
				$srch_attr ["search_template"] = $name_configs["search_template"];
				$srch_attr ["search_attr_arr"] = $name_configs["search_attr_arr"];

				$va_prep_resp = self::va_get_attr($mmoc, $srch_attr, "SYSTEM_SEARCH_LABEL", $moc_status["moi_data"], $deps, $vattrs, $mmoc_attrs, $moc_list_all_lkp, $mc_lkp, $pmoc_path, $cids_list, $domain_id, $vendor_id );
				if( !$va_prep_resp->valid )
				{
					$moc_status ["attr_dets"]["SYSTEM_SEARCH_LABEL"] = array("lbl"=>"SYSTEM_SEARCH_LABEL", "moc_id"=>$mmoc->id, "error"=>"SL: ".$va_prep_resp->message);
				}
			}

			if( isset($name_configs["display_template"]) && isset($name_configs["display_attr_arr"]) && isset($sel_attrs["SYSTEM_USER_LABEL"]) && !isset($moc_status["attr_dets"]["SYSTEM_USER_LABEL"]) )
			{
				$disp_attr = array();
				$disp_attr ["type"] = 7;
				$disp_attr ["display_template"] = $name_configs["display_template"];
				$disp_attr ["display_attr_arr"] = $name_configs["display_attr_arr"];

				$va_prep_resp = self::va_get_attr($mmoc, $disp_attr, "SYSTEM_USER_LABEL", $moc_status["moi_data"], $deps, $vattrs, $mmoc_attrs, $moc_list_all_lkp, $mc_lkp, $pmoc_path, $cids_list, $domain_id, $vendor_id );
				if( !$va_prep_resp->valid )
				{
					$moc_status ["attr_dets"]["SYSTEM_USER_LABEL"] = array("lbl"=>"SYSTEM_USER_LABEL", "moc_id"=>$mmoc->id, "error"=>"UL: ".$va_prep_resp->message);
				}
			}
		}

		foreach ($vattrs as $attrl => $attr)
		{
			if( isset($sel_attrs[$attrl]) && !isset($moc_status["attr_dets"][$attrl]) && !$attr["computed_populated"] )
			{
				$va_prep_resp = self::va_get_attr($mmoc, $attr, $attrl, $moc_status["moi_data"], $deps, $vattrs, $mmoc_attrs, $moc_list_all_lkp, $mc_lkp, $pmoc_path, $cids_list, $domain_id, $vendor_id );
				if( !$va_prep_resp->valid )
				{
					$moc_status ["attr_dets"][$attrl] = array("lbl"=>$attrl, "moc_id"=>$mmoc->id, "error"=>"VA: ".$va_prep_resp->message);
				}
			}
		}

		return $moc_status;
	}

	public static function va_attr_resp($attr, $mc_lkp, $pmoc_path, $cids_list, $mmoc_attrs, $moc_list_all_lkp, $sel_attrs, $vattrs, &$deps, &$cm_raw, &$bus_ref, &$sys_lbls, &$moi_parts, $domain_id, $vendor_id )
	{
		$resp = new stdClass;
		$resp->valid = true;
		$resp->message = "";

		$kpi_lkp = Yii::app()->params["kpi_lkp"];

		$aggr_funs = array(
			"child_moi_count" => "child_moi_count",
			"uniqe_attr_count" => "uniqe_attr_count",
			"child_attr_min" => "child_attr_min",
			"child_attr_max" => "child_attr_max",
			"child_attr_avg" => "child_attr_avg",
			"child_attr_csv" => "child_attr_csv",
		);

		if( $attr["type"] == 1 )
		{
			// parent to child
			if( isset($attr["parent_moc_id"]) && isset($attr["parent_moc_attr"]) )
			{
				$pmid = intval($attr["parent_moc_id"]);
				if( isset($mc_lkp[$pmid]) && isset($pmoc_path[$pmid]) )
				{
					$pattrs = self::get_all_attributes( $mc_lkp[$pmid]["fmoi"], $moc_list_all_lkp["{$domain_id}_{$vendor_id}"] );
					if( isset($pattrs[ $attr["parent_moc_attr"] ]) )
					{
						if( !isset($deps["{$domain_id}_{$vendor_id}_{$pmid}"]) )
						{
							$deps["{$domain_id}_{$vendor_id}_{$pmid}"] = array( "domain_id"=>$domain_id, "vendor_id"=>$vendor_id, "moc_id"=>$pmid, "attrs"=>array() );
						}

						$deps["{$domain_id}_{$vendor_id}_{$pmid}"]["attrs"][ $attr["parent_moc_attr"] ] = $attr["parent_moc_attr"];
					}
					else
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-E4.";
						return $resp;
					}
				}
				else
				{
					$resp->valid = false;
					$resp->message = "Invalid Configs-E3.";
					return $resp;
				}
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-E1.";
				return $resp;
			}
		}
		else if( $attr["type"] == 2 )
		{
			// Relation Attributes
			if( isset($attr["int_domain_id"]) && isset($attr["int_vendor_id"]) && isset($attr["int_moc_id"]) && isset($attr["re_moc_template"]) && isset($attr["re_moc_template_attr_arr"]) && isset($attr["fe_moc_template"]) && isset($attr["fe_moc_template_attr_arr"]) && isset($attr["rel_cond"]) && isset($attr["rel_cond_attrs"]) )
			{
				$attr_f = true;
				foreach ($attr["re_moc_template_attr_arr"] as $re_attr_det)
				{
					if( !isset($mmoc_attrs[ $re_attr_det["attr"] ]) )
					{
						$attr_f = false;
						break;
					}
				}

				if( !$attr_f )
				{
					$resp->valid = false;
					$resp->message = "Invalid Configs-E2.";
					return $resp;
				}
				
				foreach ($attr["re_moc_template_attr_arr"] as $re_attr_det)
				{
					if( $mmoc_attrs[ $re_attr_det["attr"] ] == 1 )
					{
						$sys_lbls [ $re_attr_det["attr"] ] = $re_attr_det["attr"];
					}
					else if( $mmoc_attrs[ $re_attr_det["attr"] ] == 2 )
					{
						$cm_raw [ $re_attr_det["attr"] ] = $re_attr_det["attr"];
					}
					else if( $mmoc_attrs[ $re_attr_det["attr"] ] == 3 )
					{
						$bus_ref [ $re_attr_det["attr"] ] = $re_attr_det["attr"];
					}
					else if( $mmoc_attrs[ $re_attr_det["attr"] ] == 4 )
					{
						if( !isset($sel_attrs[ $re_attr_det["attr"] ]) && isset($vattrs[ $re_attr_det["attr"] ]) )
						{
							$int_resp = self::va_attr_resp($vattrs[ $re_attr_det["attr"] ], $mc_lkp, $pmoc_path, $cids_list, $mmoc_attrs, $moc_list_all_lkp, $sel_attrs, $vattrs, $deps, $cm_raw, $bus_ref, $sys_lbls, $moi_parts, $domain_id, $vendor_id );
							if( !$int_resp->valid )
							{
								$resp->valid = false;
								$resp->message = "Invalid Configs-E16: ".$re_attr_det["attr"];
								return $resp;
							}
						}
					}
					else if( $mmoc_attrs[ $re_attr_det["attr"] ] == 5 )
					{
						$moi_parts [ $re_attr_det["attr"] ] = $re_attr_det["attr"];
					}
				}

				$rel_sel_attr = null;

				if( isset($attr["relation_moc_attr"]) )
				{
					$rel_sel_attr = $attr["relation_moc_attr"];
				}
				else if( isset($attr["relation_moc_aggr_fun"]) && isset( $aggr_funs[ $attr["relation_moc_aggr_fun"] ] ) )
				{
					if( $attr["relation_moc_aggr_fun"] == "child_moi_count" )
					{
						$rel_sel_attr = "SYSTEM_MOI";
					}
					else if( isset($attr["relation_moc_aggr_attr"]) )
					{
						$rel_sel_attr = $attr["relation_moc_aggr_attr"];
					}
					else
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-E9.";
						return $resp;
					}
				}
				else
				{
					$resp->valid = false;
					$resp->message = "Invalid Configs-E6.";
					return $resp;
				}

				$int_domain_id = intval($attr["int_domain_id"]);
				$int_vendor_id = intval($attr["int_vendor_id"]);

				if ( isset($kpi_lkp[$int_domain_id]) && isset($kpi_lkp[$int_domain_id]["vendors"][$int_vendor_id]) )
				{
					$rel_moc = $kpi_lkp[$int_domain_id]["vendors"][$int_vendor_id]["moc"]["class"]::model()->findByPk( intval($attr["int_moc_id"]) );
					if( $rel_moc != null )
					{
						$rel_moc_id = $rel_moc->id;
						$rel_attrs = self::get_all_attributes($rel_moc, $moc_list_all_lkp["{$int_domain_id}_{$int_vendor_id}"]);

						$attr_f = true;
						foreach ($attr["fe_moc_template_attr_arr"] as $fe_attr_det)
						{
							if( !isset($rel_attrs[ $fe_attr_det["attr"] ]) )
							{
								$attr_f = false;
								break;
							}
						}
						foreach ($attr["rel_cond_attrs"] as $rel_cond_attr)
						{
							if( !isset($rel_attrs[ $rel_cond_attr ]) )
							{
								$attr_f = false;
								break;
							}
						}
						if( !isset($rel_attrs[ $rel_sel_attr ]) )
						{
							$attr_f = false;
						}

						if(!$attr_f)
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-E11.";
							return $resp;
						}
						else
						{
							if( !isset($deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]) )
							{
								$deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"] = array( "domain_id"=>$int_domain_id, "vendor_id"=>$int_vendor_id, "moc_id"=>$rel_moc_id, "attrs"=>array() );
							}

							foreach ($attr["rel_cond_attrs"] as $rel_cond_attr)
							{
								$deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]["attrs"][ $rel_cond_attr ] = $rel_cond_attr;
							}
							foreach ($attr["fe_moc_template_attr_arr"] as $fe_attr_det)
							{
								$deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]["attrs"][ $fe_attr_det["attr"] ] = $fe_attr_det["attr"];
							}
							$deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]["attrs"][ $rel_sel_attr ] = $rel_sel_attr;
						}
					}
					else
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-E10.";
						return $resp;
					}
				}
				else
				{
					$resp->valid = false;
					$resp->message = "Invalid Configs-E14.";
					return $resp;
				}
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-E5.";
				return $resp;
			}
		}
		else if( $attr["type"] == 3 )
		{
			// conditional Attributes
			if( isset($attr["fconds_config"]) )
			{
				foreach ($attr["fconds_config"] as $trans_lkp)
				{
					if( isset($trans_lkp["pattr_template"]) && isset($trans_lkp["pattr_template_attrs"]) && isset($trans_lkp["pattr_cond"]) && isset($trans_lkp["pattr_cond_attrs"]) )
					{
						$attr_f = true;
						foreach ($trans_lkp["pattr_template_attrs"] as $pattr_template_attr)
						{
							if( !isset($mmoc_attrs[ $pattr_template_attr["attr"] ]) )
							{
								$attr_f = false;
								break;
							}
						}

						if( !$attr_f )
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-E19.";
							return $resp;
						}

						foreach ($trans_lkp["pattr_template_attrs"] as $pattr_template_attr)
						{
							if( $mmoc_attrs[ $pattr_template_attr["attr"] ] == 1 )
							{
								$sys_lbls [ $pattr_template_attr["attr"] ] = $pattr_template_attr["attr"];
							}
							else if( $mmoc_attrs[ $pattr_template_attr["attr"] ] == 2 )
							{
								$cm_raw [ $pattr_template_attr["attr"] ] = $pattr_template_attr["attr"];
							}
							else if( $mmoc_attrs[ $pattr_template_attr["attr"] ] == 3 )
							{
								$bus_ref [ $pattr_template_attr["attr"] ] = $pattr_template_attr["attr"];
							}
							else if( $mmoc_attrs[ $pattr_template_attr["attr"] ] == 4 )
							{
								if( !isset($sel_attrs[ $pattr_template_attr["attr"] ]) && isset($vattrs[ $pattr_template_attr["attr"] ]) )
								{
									$int_resp = self::va_attr_resp($vattrs[ $pattr_template_attr["attr"] ], $mc_lkp, $pmoc_path, $cids_list, $mmoc_attrs, $moc_list_all_lkp, $sel_attrs, $vattrs, $deps, $cm_raw, $bus_ref, $sys_lbls, $moi_parts, $domain_id, $vendor_id );
									if( !$int_resp->valid )
									{
										$resp->valid = false;
										$resp->message = "Invalid Configs-E20: ".$pattr_template_attr["attr"];
										return $resp;
									}
								}
							}
							else if( $mmoc_attrs[ $pattr_template_attr["attr"] ] == 5 )
							{
								$moi_parts [ $pattr_template_attr["attr"] ] = $pattr_template_attr["attr"];
							}
						}


						$attr_f = true;
						foreach ($trans_lkp["pattr_cond_attrs"] as $pattr_cond_attr)
						{
							if( !isset($mmoc_attrs[ $pattr_cond_attr ]) )
							{
								$attr_f = false;
								break;
							}
						}

						if( !$attr_f )
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-E21.";
							return $resp;
						}

						foreach ($trans_lkp["pattr_cond_attrs"] as $pattr_cond_attr)
						{
							if( $mmoc_attrs[ $pattr_cond_attr ] == 1 )
							{
								$sys_lbls [ $pattr_cond_attr ] = $pattr_cond_attr;
							}
							else if( $mmoc_attrs[ $pattr_cond_attr ] == 2 )
							{
								$cm_raw [ $pattr_cond_attr ] = $pattr_cond_attr;
							}
							else if( $mmoc_attrs[ $pattr_cond_attr ] == 3 )
							{
								$bus_ref [ $pattr_cond_attr ] = $pattr_cond_attr;
							}
							else if( $mmoc_attrs[ $pattr_cond_attr ] == 4 )
							{
								if( !isset($sel_attrs[ $pattr_cond_attr ]) && isset($vattrs[ $pattr_cond_attr ]) )
								{
									$int_resp = self::va_attr_resp($vattrs[ $pattr_cond_attr ], $mc_lkp, $pmoc_path, $cids_list, $mmoc_attrs, $moc_list_all_lkp, $sel_attrs, $vattrs, $deps, $cm_raw, $bus_ref, $sys_lbls, $moi_parts, $domain_id, $vendor_id );
									if( !$int_resp->valid )
									{
										$resp->valid = false;
										$resp->message = "Invalid Configs-E22: ".$pattr_cond_attr;
										return $resp;
									}
								}
							}
							else if( $mmoc_attrs[ $pattr_cond_attr ] == 5 )
							{
								$moi_parts [ $pattr_cond_attr ] = $pattr_cond_attr;
							}
						}
					}
					else
					{
						break;
						$resp->valid = false;
						$resp->message = "Invalid Configs-E18.";
						return $resp;
					}
				}
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-E17.";
				return $resp;
			}
		}
		else if( $attr["type"] == 4 )
		{
			if( isset($attr["translation_attribute"]) && isset($attr["translation_lkp"]) && isset($mmoc_attrs[ $attr["translation_attribute"] ]) )
			{
				if( $mmoc_attrs[ $attr["translation_attribute"] ] == 1 )
				{
					$sys_lbls [ $attr["translation_attribute"] ] = $attr["translation_attribute"];
				}
				else if( $mmoc_attrs[ $attr["translation_attribute"] ] == 2 )
				{
					$cm_raw [ $attr["translation_attribute"] ] = $attr["translation_attribute"];
				}
				else if( $mmoc_attrs[ $attr["translation_attribute"] ] == 3 )
				{
					$bus_ref [ $attr["translation_attribute"] ] = $attr["translation_attribute"];
				}
				else if( $mmoc_attrs[ $attr["translation_attribute"] ] == 4 )
				{
					if( !isset($sel_attrs[ $attr["translation_attribute"] ]) && isset($vattrs[ $attr["translation_attribute"] ]) )
					{
						$int_resp = self::va_attr_resp($vattrs[ $attr["translation_attribute"] ], $mc_lkp, $pmoc_path, $cids_list, $mmoc_attrs, $moc_list_all_lkp, $sel_attrs, $vattrs, $deps, $cm_raw, $bus_ref, $sys_lbls, $moi_parts, $domain_id, $vendor_id );
						if( !$int_resp->valid )
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-E24: ".$attr["translation_attribute"];
							return $resp;
						}
					}
				}
				else if( $mmoc_attrs[ $attr["translation_attribute"] ] == 5 )
				{
					$moi_parts [ $attr["translation_attribute"] ] = $attr["translation_attribute"];
				}
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-E23.";
				return $resp;
			}
		}
		else if( $attr["type"] == 5 )
		{
			// child MOC Attributes
			if( isset($attr["child_moc_id"]) && isset($attr["child_moc_aggr_fun"]) && isset( $aggr_funs[ $attr["child_moc_aggr_fun"] ] ) && isset($attr["child_cond"]) && isset($attr["child_cond_attrs"]) )
			{
				$chmid = intval($attr["child_moc_id"]);
				if( isset($mc_lkp[$chmid]) && isset($cids_list[$chmid]) )
				{
					$cattrs = self::get_all_attributes( $mc_lkp[$chmid]["fmoi"], $moc_list_all_lkp["{$domain_id}_{$vendor_id}"] );

					$child_sel_attr = null;
					if( $attr["child_moc_aggr_fun"] == "child_moi_count" )
					{
						$child_sel_attr = "SYSTEM_MOI";
					}
					else if( isset($attr["child_moc_attr"]) )
					{
						$child_sel_attr = $attr["child_moc_attr"];
					}
					else
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-E8.";
						return $resp;
					}

					$attr_f = true;
					foreach ($attr["child_cond_attrs"] as $ch_cond_attr)
					{
						if( !isset($cattrs[ $ch_cond_attr ]) )
						{
							$attr_f = false;
							break;
						}
					}
					if( !isset($cattrs[ $child_sel_attr ]) )
					{
						$attr_f = false;
					}

					if(!$attr_f)
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-E13.";
						return $resp;
					}
					else
					{
						if( !isset($deps["{$domain_id}_{$vendor_id}_{$chmid}"]) )
						{
							$deps["{$domain_id}_{$vendor_id}_{$chmid}"] = array( "domain_id"=>$domain_id, "vendor_id"=>$vendor_id, "moc_id"=>$chmid, "attrs"=>array() );
						}

						foreach ($attr["child_cond_attrs"] as $fe_attr_det)
						{
							$deps["{$domain_id}_{$vendor_id}_{$chmid}"]["attrs"][ $fe_attr_det ] = $fe_attr_det;
						}
						$deps["{$domain_id}_{$vendor_id}_{$chmid}"]["attrs"][ $child_sel_attr ] = $child_sel_attr;
					}
				}
				else
				{
					$resp->valid = false;
					$resp->message = "Invalid Configs-E12.";
					return $resp;
				}
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-E7.";
				return $resp;
			}
		}
		else if( $attr["type"] == 6 )
		{
			// System Search Label
			if( isset($attr["search_template"]) && isset($attr["search_attr_arr"]) )
			{
				foreach ($attr["search_attr_arr"] as $search_attr)
				{
					if( isset($mmoc_attrs[ $search_attr["attr"] ]) )
					{
						if( $mmoc_attrs[ $search_attr["attr"] ] == 1 )
						{
							$sys_lbls [ $search_attr["attr"] ] = $search_attr["attr"];
						}
						else if( $mmoc_attrs[ $search_attr["attr"] ] == 2 )
						{
							$cm_raw [ $search_attr["attr"] ] = $search_attr["attr"];
						}
						else if( $mmoc_attrs[ $search_attr["attr"] ] == 3 )
						{
							$bus_ref [ $search_attr["attr"] ] = $search_attr["attr"];
						}
						else if( $mmoc_attrs[ $search_attr["attr"] ] == 4 )
						{
							if( !isset($sel_attrs[ $search_attr["attr"] ]) && isset($vattrs[ $search_attr["attr"] ]) )
							{
								$srch_lbl_resp = self::va_attr_resp($vattrs[ $search_attr["attr"] ], $mc_lkp, $pmoc_path, $cids_list, $mmoc_attrs, $moc_list_all_lkp, $sel_attrs, $vattrs, $deps, $cm_raw, $bus_ref, $sys_lbls, $moi_parts, $domain_id, $vendor_id );
								if( !$srch_lbl_resp->valid )
								{
									$resp->valid = false;
									$resp->message = "Invalid Configs-SN1: ".$search_attr["attr"];
									return $resp;
								}
							}
						}
						else if( $mmoc_attrs[ $search_attr["attr"] ] == 5 )
						{
							$moi_parts [ $search_attr["attr"] ] = $search_attr["attr"];
						}
					}
					else
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-SN2: ".$search_attr["attr"];
						return $resp;
					}
				}
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-SN3: SYSTEM_SEARCH_LABEL";
				return $resp;
			}
		}
		else if( $attr["type"] == 7 )
		{
			// System User Label
			if( isset($attr["display_template"]) && isset($attr["display_attr_arr"]) )
			{
				foreach ($attr["display_attr_arr"] as $display_attr)
				{
					if( isset($mmoc_attrs[ $display_attr["attr"] ]) )
					{
						if( $mmoc_attrs[ $display_attr["attr"] ] == 1 )
						{
							$sys_lbls [ $display_attr["attr"] ] = $display_attr["attr"];
						}
						else if( $mmoc_attrs[ $display_attr["attr"] ] == 2 )
						{
							$cm_raw [ $display_attr["attr"] ] = $display_attr["attr"];
						}
						else if( $mmoc_attrs[ $display_attr["attr"] ] == 3 )
						{
							$bus_ref [ $display_attr["attr"] ] = $display_attr["attr"];
						}
						else if( $mmoc_attrs[ $display_attr["attr"] ] == 4 )
						{
							if( !isset($sel_attrs[ $display_attr["attr"] ]) && isset($vattrs[ $display_attr["attr"] ]) )
							{
								$disp_lbl_resp = self::va_attr_resp($vattrs[ $display_attr["attr"] ], $mc_lkp, $pmoc_path, $cids_list, $mmoc_attrs, $moc_list_all_lkp, $sel_attrs, $vattrs, $deps, $cm_raw, $bus_ref, $sys_lbls, $moi_parts, $domain_id, $vendor_id );
								if( !$disp_lbl_resp->valid )
								{
									$resp->valid = false;
									$resp->message = "Invalid Configs-SN5: ".$display_attr["attr"];
									return $resp;
								}
							}
						}
						else if( $mmoc_attrs[ $display_attr["attr"] ] == 5 )
						{
							$moi_parts [ $display_attr["attr"] ] = $display_attr["attr"];
						}
					}
					else
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-SN6: ".$display_attr["attr"];
						return $resp;
					}
				}
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-SN4: SYSTEM_USER_LABEL";
				return $resp;
			}
		}
		else
		{
			$resp->valid = false;
			$resp->message = "Invalid Configs-E15.";
			return $resp;
		}

		return $resp;
	}

	public static function va_get_attr($mmoc, $attr, $attrl, &$moi_data, $deps, &$vattrs, $mmoc_attrs, $moc_list_all_lkp, $mc_lkp, $pmoc_path, $cids_list, $domain_id, $vendor_id )
	{
		$resp = new stdClass;
		$resp->valid = true;
		$resp->message = "";

		$kpi_lkp = Yii::app()->params["kpi_lkp"];

		$aggr_funs = array(
			"child_moi_count" => "child_moi_count",
			"uniqe_attr_count" => "uniqe_attr_count",
			"child_attr_min" => "child_attr_min",
			"child_attr_max" => "child_attr_max",
			"child_attr_avg" => "child_attr_avg",
			"child_attr_csv" => "child_attr_csv",
		);

		if( $attr["type"] == 1 )
		{
			// parent to child
			if( isset($attr["parent_moc_id"]) && isset($attr["parent_moc_attr"]) )
			{
				$pmid = intval($attr["parent_moc_id"]);
				if( isset($mc_lkp[$pmid]) )
				{
					$pattrs = self::get_all_attributes( $mc_lkp[$pmid]["fmoi"], $moc_list_all_lkp["{$domain_id}_{$vendor_id}"] );
					if( isset($pattrs[ $attr["parent_moc_attr"] ]) )
					{
						$arr_type = null;
						if( $pattrs[ $attr["parent_moc_attr"] ] == 1 )
							$arr_type = "sys_labels";
						else if( $pattrs[ $attr["parent_moc_attr"] ] == 2 )
							$arr_type = "raw_attrs";
						else if( $pattrs[ $attr["parent_moc_attr"] ] == 3 )
							$arr_type = "bus_attrs";
						else if( $pattrs[ $attr["parent_moc_attr"] ] == 4 )
							$arr_type = "va_attrs";
						else if( $pattrs[ $attr["parent_moc_attr"] ] == 5 )
							$arr_type = "moi_ps";

						if( isset($deps["{$domain_id}_{$vendor_id}_{$pmid}"]) && isset($deps["{$domain_id}_{$vendor_id}_{$pmid}"]["attrs"][ $attr["parent_moc_attr"] ]) )
						{
							if( !isset($deps["{$domain_id}_{$vendor_id}_{$pmid}"]["attr_dets"][ $attr["parent_moc_attr"] ]) )
							{
								$ppath = self::get_moc_path($mc_lkp[$pmid]["fmoi"], $moc_list_all_lkp["{$domain_id}_{$vendor_id}"]);

								$parent_lkp = array();
								foreach ($deps["{$domain_id}_{$vendor_id}_{$pmid}"]["moi_data"] as $pmoi_ent)
								{
									$moi_pcs = array();
									$allf = true;
									foreach ($ppath as $pm)
									{
										if( isset($pmoi_ent["moi_parts"][$pm["name"]]) )
										{
											$moi_pcs [] = $pm["name"]."=".$pmoi_ent["moi_parts"][$pm["name"]];
										}
										else
										{
											$allf = false;
											break;
										}
									}

									if( isset($pmoi_ent[$arr_type][ $attr["parent_moc_attr"] ]) && $allf )
									{
										$parent_lkp [ implode(",", $moi_pcs) ] = $pmoi_ent[$arr_type][ $attr["parent_moc_attr"] ];
									}
								}

								foreach ($moi_data as $moiid => $moi_ent)
								{
									$moi_pcs = array();
									$allf = true;
									foreach ($ppath as $pm)
									{
										if( isset($moi_ent["moi_parts"][$pm["name"]]) )
										{
											$moi_pcs [] = $pm["name"]."=".$moi_ent["moi_parts"][$pm["name"]];
										}
										else
										{
											$allf = false;
											break;
										}
									}
									if( $allf )
									{
										$parent_dn = implode(",", $moi_pcs);
										if( isset($parent_lkp[ $parent_dn ]) )
										{
											$moi_data [$moiid][ "va_attrs" ][ $attrl ] = $parent_lkp[ $parent_dn ];
										}
									}
								}

								$vattrs [ $attrl ] ["computed_populated"] = true;
							}
							else
							{
								$resp->valid = false;
								$resp->message = "Invalid Configs-ED26: ".json_encode($deps["{$domain_id}_{$vendor_id}_{$pmid}"]["attr_dets"][ $attr["parent_moc_attr"] ]);
								return $resp;
							}
						}
						else
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-ED25.";
							return $resp;
						}
					}
					else
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-ED4.";
						return $resp;
					}
				}
				else
				{
					$resp->valid = false;
					$resp->message = "Invalid Configs-ED3.";
					return $resp;
				}
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-ED1.";
				return $resp;
			}
		}
		else if( $attr["type"] == 2 )
		{
			// Relation Attributes
			if( isset($attr["int_domain_id"]) && isset($attr["int_vendor_id"]) && isset($attr["int_moc_id"]) && isset($attr["re_moc_template"]) && isset($attr["re_moc_template_attr_arr"]) && isset($attr["fe_moc_template"]) && isset($attr["fe_moc_template_attr_arr"]) && isset($attr["rel_cond"]) && isset($attr["rel_cond_attrs"]) )
			{
				$rel_sel_attr = null;
				if( isset($attr["relation_moc_attr"]) )
				{
					$rel_sel_attr = $attr["relation_moc_attr"];
				}
				else if( isset($attr["relation_moc_aggr_fun"]) && isset( $aggr_funs[ $attr["relation_moc_aggr_fun"] ] ) )
				{
					if( $attr["relation_moc_aggr_fun"] == "child_moi_count" )
					{
						$rel_sel_attr = "SYSTEM_MOI";
					}
					else if( isset($attr["relation_moc_aggr_attr"]) )
					{
						$rel_sel_attr = $attr["relation_moc_aggr_attr"];
					}
					else
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-ED9.";
						return $resp;
					}
				}
				else
				{
					$resp->valid = false;
					$resp->message = "Invalid Configs-ED6.";
					return $resp;
				}

				$int_domain_id = intval($attr["int_domain_id"]);
				$int_vendor_id = intval($attr["int_vendor_id"]);

				if ( isset($kpi_lkp[$int_domain_id]) && isset($kpi_lkp[$int_domain_id]["vendors"][$int_vendor_id]) )
				{
					$rel_moc = $kpi_lkp[$int_domain_id]["vendors"][$int_vendor_id]["moc"]["class"]::model()->findByPk( intval($attr["int_moc_id"]) );
					if( $rel_moc != null )
					{
						$rel_moc_id = $rel_moc->id;
						$rel_attrs = self::get_all_attributes($rel_moc, $moc_list_all_lkp["{$int_domain_id}_{$int_vendor_id}"]);

						$attr_f = true;
						foreach ($attr["re_moc_template_attr_arr"] as $re_attr_det)
						{
							if( !isset($mmoc_attrs[ $re_attr_det["attr"] ]) )
							{
								$attr_f = false;
								break;
							}
						}

						if( !$attr_f )
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-ED2.";
							return $resp;
						}

						$attr_f = true;
						foreach ($attr["fe_moc_template_attr_arr"] as $fe_attr_det)
						{
							if( !isset($rel_attrs[ $fe_attr_det["attr"] ]) )
							{
								$attr_f = false;
								break;
							}
						}
						foreach ($attr["rel_cond_attrs"] as $rel_cond_attr)
						{
							if( !isset($rel_attrs[ $rel_cond_attr ]) )
							{
								$attr_f = false;
								break;
							}
						}

						if( !isset($rel_attrs[ $rel_sel_attr ]) )
						{
							$attr_f = false;
						}

						if(!$attr_f)
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-ED11.";
							return $resp;
						}

						if( !isset($deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]) )
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-ED35.";
							return $resp;
						}
						
						foreach ($attr["fe_moc_template_attr_arr"] as $fe_attr_det)
						{
							if( isset($deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]["attrs"][ $fe_attr_det["attr"] ]) )
							{
								if( isset($deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]["attr_dets"][ $fe_attr_det["attr"] ]) )
								{
									break;
									$resp->valid = false;
									$resp->message = "Invalid Configs-ED29: ".json_encode($deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]["attr_dets"][ $fe_attr_det["attr"] ]);
									return $resp;
								}
							}
							else
							{
								break;
								$resp->valid = false;
								$resp->message = "Invalid Configs-ED28.";
								return $resp;
							}
						}

						foreach ($attr["rel_cond_attrs"] as $rel_cond_attr)
						{
							if( isset($deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]["attrs"][ $rel_cond_attr ]) )
							{
								if( isset($deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]["attr_dets"][ $rel_cond_attr ]) )
								{
									break;
									$resp->valid = false;
									$resp->message = "Invalid Configs-ED30: ".json_encode($deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]["attr_dets"][ $rel_cond_attr ]);
									return $resp;
								}
							}
							else
							{
								break;
								$resp->valid = false;
								$resp->message = "Invalid Configs-ED31.";
								return $resp;
							}
						}

						if( isset($deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]["attrs"][ $rel_sel_attr ]) )
						{
							if( isset($deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]["attr_dets"][ $rel_sel_attr ]) )
							{
								$resp->valid = false;
								$resp->message = "Invalid Configs-ED33: ".json_encode($deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]["attr_dets"][ $rel_sel_attr ]);
								return $resp;
							}
						}
						else
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-ED32.";
							return $resp;
						}

						$rel_cond_obj = json_decode(json_encode($attr["rel_cond"]));

						$rel_moc_lkp = array();
						foreach ($deps["{$int_domain_id}_{$int_vendor_id}_{$rel_moc_id}"]["moi_data"] as $rel_moi_ent)
						{
							$rel_cond_attr_arr = array();
							foreach ($attr["rel_cond_attrs"] as $rel_cond_attr)
							{
								$arr_type = null;
								if( $rel_attrs[ $rel_cond_attr ] == 1 )
									$arr_type = "sys_labels";
								else if( $rel_attrs[ $rel_cond_attr ] == 2 )
									$arr_type = "raw_attrs";
								else if( $rel_attrs[ $rel_cond_attr ] == 3 )
									$arr_type = "bus_attrs";
								else if( $rel_attrs[ $rel_cond_attr ] == 4 )
									$arr_type = "va_attrs";
								else if( $rel_attrs[ $rel_cond_attr ] == 5 )
									$arr_type = "moi_ps";

								if( isset($rel_moi_ent[$arr_type][ $rel_cond_attr ]) )
								{
									$rel_cond_attr_arr [ $rel_cond_attr ] = $rel_moi_ent[$arr_type][ $rel_cond_attr ];
								}
								else
								{
									$rel_cond_attr_arr [ $rel_cond_attr ] = null;
								}
							}

							$rel_cond_resp = self::execute_cond( $rel_cond_obj, $rel_cond_attr_arr );
							if( !$rel_cond_resp->valid )
							{
								break;
								$resp->valid = false;
								$resp->message = "Invalid Configs-ED52.";
								return $resp;
							}

							if( $rel_cond_resp->result == false )
							{
								continue;
							}

							$rel_key = $attr["fe_moc_template"];
							$all_flkp = true;

							foreach ($attr["fe_moc_template_attr_arr"] as $fe_attr_det)
							{
								$arr_type = null;
								if( $rel_attrs[ $fe_attr_det["attr"] ] == 1 )
									$arr_type = "sys_labels";
								else if( $rel_attrs[ $fe_attr_det["attr"] ] == 2 )
									$arr_type = "raw_attrs";
								else if( $rel_attrs[ $fe_attr_det["attr"] ] == 3 )
									$arr_type = "bus_attrs";
								else if( $rel_attrs[ $fe_attr_det["attr"] ] == 4 )
									$arr_type = "va_attrs";
								else if( $rel_attrs[ $fe_attr_det["attr"] ] == 5 )
									$arr_type = "moi_ps";

								if( isset($rel_moi_ent[$arr_type][ $fe_attr_det["attr"] ]) )
								{
									$rel_key = str_replace($fe_attr_det["inst"], $rel_moi_ent[$arr_type][ $fe_attr_det["attr"] ], $rel_key);
								}
								else
								{
									$all_flkp = false;
									break;
								}
							}

							$arr_type = null;
							if( $rel_attrs[ $rel_sel_attr ] == 1 )
								$arr_type = "sys_labels";
							else if( $rel_attrs[ $rel_sel_attr ] == 2 )
								$arr_type = "raw_attrs";
							else if( $rel_attrs[ $rel_sel_attr ] == 3 )
								$arr_type = "bus_attrs";
							else if( $rel_attrs[ $rel_sel_attr ] == 4 )
								$arr_type = "va_attrs";
							else if( $rel_attrs[ $rel_sel_attr ] == 5 )
								$arr_type = "moi_ps";

							if( $all_flkp && isset($rel_moi_ent[$arr_type][ $rel_sel_attr ]) )
							{
								if( !isset($rel_moc_lkp [$rel_key]) )
									$rel_moc_lkp [$rel_key] = array();

								$rel_moc_lkp [$rel_key] [ $rel_moi_ent["id"] ] = $rel_moi_ent[$arr_type][ $rel_sel_attr ];
							}
						}

						foreach ($attr["re_moc_template_attr_arr"] as $re_attr_det)
						{
							if( isset($mmoc_attrs[ $re_attr_det["attr"] ]) && $mmoc_attrs[ $re_attr_det["attr"] ] == 4 )
							{
								$va_in_resp = self::va_get_attr($mmoc, $vattrs[ $re_attr_det["attr"] ], $re_attr_det["attr"], $moi_data, $deps, $vattrs, $mmoc_attrs, $moc_list_all_lkp, $mc_lkp, $pmoc_path, $cids_list, $domain_id, $vendor_id );
								if( !$va_in_resp->valid )
								{
									$resp->valid = false;
									$resp->message = "Invalid Configs-EDSN43: ".$re_attr_det["attr"];
									return $resp;
								}
								else
								{
									$vattrs [ $re_attr_det["attr"] ] ["computed_populated"] = true;
								}
							}
						}

						foreach ($moi_data as $moiid => $moi_ent)
						{
							$rel_re_key = $attr["re_moc_template"];
							$all_re_flkp = true;

							foreach ($attr["re_moc_template_attr_arr"] as $re_attr_det)
							{
								if( $mmoc_attrs[ $re_attr_det["attr"] ] == 1 )
								{
									if( isset($moi_ent[ "sys_labels" ][ $re_attr_det["attr"] ]) )
									{
										$rel_re_key = str_replace($re_attr_det["inst"], $moi_ent["sys_labels"][ $re_attr_det["attr"] ], $rel_re_key);
									}
									else
									{
										$all_re_flkp = false;
									}
								}
								else if( $mmoc_attrs[ $re_attr_det["attr"] ] == 2 )
								{
									if( isset($moi_ent[ "raw_attrs" ][ $re_attr_det["attr"] ]) )
									{
										$rel_re_key = str_replace($re_attr_det["inst"], $moi_ent["raw_attrs"][ $re_attr_det["attr"] ], $rel_re_key);
									}
									else
									{
										$all_re_flkp = false;
									}
								}
								else if( $mmoc_attrs[ $re_attr_det["attr"] ] == 3 )
								{
									if( isset($moi_ent[ "bus_attrs" ][ $re_attr_det["attr"] ]) )
									{
										$rel_re_key = str_replace($re_attr_det["inst"], $moi_ent["bus_attrs"][ $re_attr_det["attr"] ], $rel_re_key);
									}
									else
									{
										$all_re_flkp = false;
									}
								}
								else if( $mmoc_attrs[ $re_attr_det["attr"] ] == 4 )
								{
									if( isset($moi_ent[ "va_attrs" ][ $re_attr_det["attr"] ]) )
									{
										$rel_re_key = str_replace($re_attr_det["inst"], $moi_ent["va_attrs"][ $re_attr_det["attr"] ], $rel_re_key);
									}
									else
									{
										$all_re_flkp = false;
									}
								}
								else if( $mmoc_attrs[ $re_attr_det["attr"] ] == 5 )
								{
									if( isset($moi_ent[ "moi_ps" ][ $re_attr_det["attr"] ]) )
									{
										$rel_re_key = str_replace($re_attr_det["inst"], $moi_ent["moi_ps"][ $re_attr_det["attr"] ], $rel_re_key);
									}
									else
									{
										$all_re_flkp = false;
									}
								}
							}

							if( !$all_re_flkp )
							{
								continue;
							}

							if( isset($attr["relation_moc_attr"]) )
							{
								if( isset($rel_moc_lkp[$rel_re_key]) )
								{
									krsort($rel_moc_lkp[$rel_re_key]);
									$moi_data [$moiid][ "va_attrs" ][ $attrl ] = reset($rel_moc_lkp[$rel_re_key]);
								}
							}
							else if( isset($attr["relation_moc_aggr_fun"]) && isset( $aggr_funs[ $attr["relation_moc_aggr_fun"] ] ) )
							{
								if( isset($rel_moc_lkp[$rel_re_key]) )
								{
									if(  $attr["relation_moc_aggr_fun"] == "child_moi_count" )
									{
										$moi_data [$moiid][ "va_attrs" ][ $attrl ] = sizeof($rel_moc_lkp[$rel_re_key]);
									}
									else if(  $attr["relation_moc_aggr_fun"] == "uniqe_attr_count" )
									{
										$moi_data [$moiid][ "va_attrs" ][ $attrl ] = sizeof(array_unique(array_map('trim', $rel_moc_lkp[$rel_re_key])));
									}
									else if(  $attr["relation_moc_aggr_fun"] == "child_attr_min" )
									{
										$moi_data [$moiid][ "va_attrs" ][ $attrl ] = min(array_map('floatval', $rel_moc_lkp[$rel_re_key]));
									}
									else if(  $attr["relation_moc_aggr_fun"] == "child_attr_max" )
									{
										$moi_data [$moiid][ "va_attrs" ][ $attrl ] = max(array_map('floatval', $rel_moc_lkp[$rel_re_key]));
									}
									else if(  $attr["relation_moc_aggr_fun"] == "child_attr_avg" )
									{
										$moi_data [$moiid][ "va_attrs" ][ $attrl ] = array_sum(array_map('floatval', $rel_moc_lkp[$rel_re_key])) / sizeof($rel_moc_lkp[$rel_re_key]);
									}
									else if(  $attr["relation_moc_aggr_fun"] == "child_attr_csv" )
									{
										$moi_data [$moiid][ "va_attrs" ][ $attrl ] = implode(",", array_unique(array_map('trim', $rel_moc_lkp[$rel_re_key])));								
									}
								}
								else
								{
									if( $attr["child_moc_aggr_fun"] == "child_moi_count" || $attr["child_moc_aggr_fun"] == "uniqe_attr_count" )
									{
										$moi_data [$moiid][ "va_attrs" ][ $attrl ] = 0;
									}
								}
							}
						}

						$vattrs [ $attrl ] ["computed_populated"] = true;
					}
					else
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-ED10.";
						return $resp;
					}
				}
				else
				{
					$resp->valid = false;
					$resp->message = "Invalid Configs-ED14.";
					return $resp;
				}
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-ED5.";
				return $resp;
			}
		}
		else if( $attr["type"] == 3 )
		{
			// conditional Attributes
			if( isset($attr["fconds_config"]) )
			{
				foreach ($attr["fconds_config"] as $trans_lkp)
				{
					if( isset($trans_lkp["pattr_template"]) && isset($trans_lkp["pattr_template_attrs"]) && isset($trans_lkp["pattr_cond"]) && isset($trans_lkp["pattr_cond_attrs"]) )
					{
						$attr_f = true;
						foreach ($trans_lkp["pattr_cond_attrs"] as $pattr_cond_attr)
						{
							if( !isset($mmoc_attrs[ $pattr_cond_attr ]) )
							{
								$attr_f = false;
								break;
							}
						}
						if( !$attr_f )
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-TLED21.";
							return $resp;
						}

						$attr_f = true;
						foreach ($trans_lkp["pattr_template_attrs"] as $pattr_template_attr)
						{
							if( !isset($mmoc_attrs[ $pattr_template_attr["attr"] ]) )
							{
								$attr_f = false;
								break;
							}
						}
						if( !$attr_f )
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-TLED19.";
							return $resp;
						}

						foreach ($trans_lkp["pattr_cond_attrs"] as $pattr_cond_attr)
						{
							if( isset($mmoc_attrs[ $pattr_cond_attr ]) && $mmoc_attrs[ $pattr_cond_attr ] == 4 )
							{
								$va_in_resp = self::va_get_attr($mmoc, $vattrs[ $pattr_cond_attr ], $pattr_cond_attr, $moi_data, $deps, $vattrs, $mmoc_attrs, $moc_list_all_lkp, $mc_lkp, $pmoc_path, $cids_list, $domain_id, $vendor_id );
								if( !$va_in_resp->valid )
								{
									$resp->valid = false;
									$resp->message = "Invalid Configs-TLED23: ".$pattr_cond_attr;
									return $resp;
								}
								else
								{
									$vattrs [ $pattr_cond_attr ] ["computed_populated"] = true;
								}
							}
						}

						foreach ($trans_lkp["pattr_template_attrs"] as $pattr_template_attr)
						{
							if( isset($mmoc_attrs[ $pattr_template_attr["attr"] ]) && $mmoc_attrs[ $pattr_template_attr["attr"] ] == 4 )
							{
								$va_in_resp = self::va_get_attr($mmoc, $vattrs[ $pattr_template_attr["attr"] ], $pattr_template_attr["attr"], $moi_data, $deps, $vattrs, $mmoc_attrs, $moc_list_all_lkp, $mc_lkp, $pmoc_path, $cids_list, $domain_id, $vendor_id );
								if( !$va_in_resp->valid )
								{
									$resp->valid = false;
									$resp->message = "Invalid Configs-TLED25: ".$pattr_template_attr["attr"];
									return $resp;
								}
								else
								{
									$vattrs [ $pattr_template_attr["attr"] ] ["computed_populated"] = true;
								}
							}
						}

						$tran_obj = json_decode(json_encode($trans_lkp["pattr_cond"]));

						foreach ($moi_data as $moiid => $moi_ent)
						{
							$tran_cond_arr = array();

							foreach ($trans_lkp["pattr_cond_attrs"] as $pattr_cond_attr)
							{
								$arr_type = null;
								if( $mmoc_attrs[ $pattr_cond_attr ] == 1 )
									$arr_type = "sys_labels";
								else if( $mmoc_attrs[ $pattr_cond_attr ] == 2 )
									$arr_type = "raw_attrs";
								else if( $mmoc_attrs[ $pattr_cond_attr ] == 3 )
									$arr_type = "bus_attrs";
								else if( $mmoc_attrs[ $pattr_cond_attr ] == 4 )
									$arr_type = "va_attrs";
								else if( $mmoc_attrs[ $pattr_cond_attr ] == 5 )
									$arr_type = "moi_ps";

								if( isset($moi_ent[$arr_type][ $pattr_cond_attr ]) )
								{
									$tran_cond_arr [ $pattr_cond_attr ] = $moi_ent[$arr_type][ $pattr_cond_attr ];
								}
								else
								{
									$tran_cond_arr [ $pattr_cond_attr ] = null;
								}
							}

							$tran_cond_resp = self::execute_cond( $tran_obj, $tran_cond_arr );
							if( !$tran_cond_resp->valid )
							{
								break;
								$resp->valid = false;
								$resp->message = "Invalid Configs-TLED52.";
								return $resp;
							}

							if( $tran_cond_resp->result == false )
							{
								continue;
							}

							$val_temp = $trans_lkp["pattr_template"];
							$allf = true;

							foreach ($trans_lkp["pattr_template_attrs"] as $pattr_template_attr)
							{
								if( $mmoc_attrs[ $pattr_template_attr["attr"] ] == 1 )
								{
									if( isset($moi_ent[ "sys_labels" ][ $pattr_template_attr["attr"] ]) )
									{
										$val_temp = str_replace($pattr_template_attr["inst"], $moi_ent["sys_labels"][ $pattr_template_attr["attr"] ], $val_temp);
									}
									else
									{
										$allf = false;
									}
								}
								else if( $mmoc_attrs[ $pattr_template_attr["attr"] ] == 2 )
								{
									if( isset($moi_ent[ "raw_attrs" ][ $pattr_template_attr["attr"] ]) )
									{
										$val_temp = str_replace($pattr_template_attr["inst"], $moi_ent["raw_attrs"][ $pattr_template_attr["attr"] ], $val_temp);
									}
									else
									{
										$allf = false;
									}
								}
								else if( $mmoc_attrs[ $pattr_template_attr["attr"] ] == 3 )
								{
									if( isset($moi_ent[ "bus_attrs" ][ $pattr_template_attr["attr"] ]) )
									{
										$val_temp = str_replace($pattr_template_attr["inst"], $moi_ent["bus_attrs"][ $pattr_template_attr["attr"] ], $val_temp);
									}
									else
									{
										$allf = false;
									}
								}
								else if( $mmoc_attrs[ $pattr_template_attr["attr"] ] == 4 )
								{
									if( isset($moi_ent[ "va_attrs" ][ $pattr_template_attr["attr"] ]) )
									{
										$val_temp = str_replace($pattr_template_attr["inst"], $moi_ent["va_attrs"][ $pattr_template_attr["attr"] ], $val_temp);
									}
									else
									{
										$allf = false;
									}
								}
								else if( $mmoc_attrs[ $pattr_template_attr["attr"] ] == 5 )
								{
									if( isset($moi_ent[ "moi_ps" ][ $pattr_template_attr["attr"] ]) )
									{
										$val_temp = str_replace($pattr_template_attr["inst"], $moi_ent["moi_ps"][ $pattr_template_attr["attr"] ], $val_temp);
									}
									else
									{
										$allf = false;
									}
								}
							}

							if( $allf )
							{
								$moi_data [$moiid][ "va_attrs" ][ $attrl ] = $val_temp;
							}
						}
					}
					else
					{
						break;
						$resp->valid = false;
						$resp->message = "Invalid Configs-TLED18.";
						return $resp;
					}
				}

				$vattrs [ $attrl ] ["computed_populated"] = true;
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-TLED17.";
				return $resp;
			}
		}
		else if( $attr["type"] == 4 )
		{
			if( isset($attr["translation_attribute"]) && isset($attr["translation_lkp"]) && isset($mmoc_attrs[ $attr["translation_attribute"] ]) )
			{
				if( $mmoc_attrs[ $attr["translation_attribute"] ] == 4 && isset($vattrs[ $attr["translation_attribute"] ]) )
				{
					$va_in_resp = self::va_get_attr($mmoc, $vattrs[ $attr["translation_attribute"] ], $attr["translation_attribute"], $moi_data, $deps, $vattrs, $mmoc_attrs, $moc_list_all_lkp, $mc_lkp, $pmoc_path, $cids_list, $domain_id, $vendor_id );
					if( !$va_in_resp->valid )
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-EDSN44: ".$attr["translation_attribute"];
						return $resp;
					}
					else
					{
						$vattrs [ $re_attr_det["attr"] ] ["computed_populated"] = true;
					}
				}

				foreach ($moi_data as $moiid => $moi_ent)
				{
					$attr_val = null;
					if( $mmoc_attrs[ $attr["translation_attribute"] ] == 1 )
					{
						if( isset($moi_ent[ "sys_labels" ][ $attr["translation_attribute"] ]) )
						{
							$attr_val = $moi_ent["sys_labels"][ $attr["translation_attribute"] ];
						}
					}
					else if( $mmoc_attrs[ $attr["translation_attribute"] ] == 2 )
					{
						if( isset($moi_ent[ "raw_attrs" ][ $attr["translation_attribute"] ]) )
						{
							$attr_val = $moi_ent["raw_attrs"][ $attr["translation_attribute"] ];
						}
					}
					else if( $mmoc_attrs[ $attr["translation_attribute"] ] == 3 )
					{
						if( isset($moi_ent[ "bus_attrs" ][ $attr["translation_attribute"] ]) )
						{
							$attr_val = $moi_ent["bus_attrs"][ $attr["translation_attribute"] ];
						}
					}
					else if( $mmoc_attrs[ $attr["translation_attribute"] ] == 4 )
					{
						if( isset($moi_ent[ "va_attrs" ][ $attr["translation_attribute"] ]) )
						{
							$attr_val = $moi_ent["va_attrs"][ $attr["translation_attribute"] ];
						}
					}
					else if( $mmoc_attrs[ $attr["translation_attribute"] ] == 5 )
					{
						if( isset($moi_ent[ "moi_ps" ][ $attr["translation_attribute"] ]) )
						{
							$attr_val = $moi_ent["moi_ps"][ $attr["translation_attribute"] ];
						}
					}

					if( $attr_val != null )
					{
						if( isset($attr["translation_lkp"][$attr_val]) )
						{
							$moi_data [$moiid][ "va_attrs" ][ $attrl ] = $attr["translation_lkp"][$attr_val];
						}
						else
						{
							if( isset($attr["translation_default"]) && trim($attr["translation_default"]) != "" )
							{
								$moi_data [$moiid][ "va_attrs" ][ $attrl ] = $attr["translation_default"];
							}
						}
					}
					else
					{
						if( isset($attr["translation_default"]) && trim($attr["translation_default"]) != "" )
						{
							$moi_data [$moiid][ "va_attrs" ][ $attrl ] = $attr["translation_default"];
						}
					}
				}

				$vattrs [ $attrl ] ["computed_populated"] = true;
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-ED23.";
				return $resp;
			}
		}
		else if( $attr["type"] == 5 )
		{
			// child MOC Attributes
			if( isset($attr["child_moc_id"]) && isset($attr["child_moc_aggr_fun"]) && isset( $aggr_funs[ $attr["child_moc_aggr_fun"] ] ) && isset($attr["child_cond"]) && isset($attr["child_cond_attrs"]) )
			{
				$chmid = intval($attr["child_moc_id"]);
				if( isset($mc_lkp[$chmid]) && isset($cids_list[$chmid]) )
				{
					$cattrs = self::get_all_attributes( $mc_lkp[$chmid]["fmoi"], $moc_list_all_lkp["{$domain_id}_{$vendor_id}"] );

					$child_sel_attr = null;
					if( $attr["child_moc_aggr_fun"] == "child_moi_count" )
					{
						$child_sel_attr = "SYSTEM_MOI";
					}
					else if( isset($attr["child_moc_attr"]) )
					{
						$child_sel_attr = $attr["child_moc_attr"];
					}
					else
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-ED8.";
						return $resp;
					}

					$attr_f = true;
					foreach ($attr["child_cond_attrs"] as $ch_cond_attr)
					{
						if( !isset($cattrs[ $ch_cond_attr ]) )
						{
							$attr_f = false;
							break;
						}
					}
					if( !isset($cattrs[ $child_sel_attr ]) )
					{
						$attr_f = false;
					}

					if(!$attr_f)
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-CD13.";
						return $resp;
					}

					if( !isset($deps["{$domain_id}_{$vendor_id}_{$chmid}"]) )
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-CD14.";
						return $resp;
					}
					
					foreach ($attr["child_cond_attrs"] as $ch_cond_attr)
					{
						if( isset($deps["{$domain_id}_{$vendor_id}_{$chmid}"]["attrs"][ $ch_cond_attr ]) )
						{
							if( isset($deps["{$domain_id}_{$vendor_id}_{$chmid}"]["attr_dets"][ $ch_cond_attr ]) )
							{
								break;
								$resp->valid = false;
								$resp->message = "Invalid Configs-CD15: ".json_encode($deps["{$domain_id}_{$vendor_id}_{$chmid}"]["attr_dets"][ $ch_cond_attr ]);
								return $resp;
							}
						}
						else
						{
							break;
							$resp->valid = false;
							$resp->message = "Invalid Configs-CD16.";
							return $resp;
						}
					}
					
					if( isset($deps["{$domain_id}_{$vendor_id}_{$chmid}"]["attrs"][ $child_sel_attr ]) )
					{
						if( isset($deps["{$domain_id}_{$vendor_id}_{$chmid}"]["attr_dets"][ $child_sel_attr ]) )
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-CD17: ".json_encode($deps["{$domain_id}_{$vendor_id}_{$chmid}"]["attr_dets"][ $child_sel_attr ]);
							return $resp;
						}
					}
					else
					{
						$resp->valid = false;
						$resp->message = "Invalid Configs-CD18.";
						return $resp;
					}

					$child_cond_obj = json_decode(json_encode($attr["child_cond"]));

					$thispath = self::get_moc_path($mmoc, $moc_list_all_lkp["{$domain_id}_{$vendor_id}"]);
					$child_moc_lkp = array();
					foreach ($deps["{$domain_id}_{$vendor_id}_{$chmid}"]["moi_data"] as $cmoi_ent)
					{
						$child_ppath = null;
						$moi_pcs = array();
						$allf = true;
						foreach ($thispath as $pm)
						{
							if( isset($cmoi_ent["moi_parts"][$pm["name"]]) )
							{
								$moi_pcs [] = $pm["name"]."=".$cmoi_ent["moi_parts"][$pm["name"]];
							}
							else
							{
								$allf = false;
								break;
							}
						}

						if( $allf )
						{
							$child_ppath = implode(",", $moi_pcs);
						}
						else
						{
							continue;
						}

						$child_cond_attr_arr = array();
						foreach ($attr["child_cond_attrs"] as $ch_cond_attr)
						{
							$arr_type = null;
							if( $cattrs[ $ch_cond_attr ] == 1 )
								$arr_type = "sys_labels";
							else if( $cattrs[ $ch_cond_attr ] == 2 )
								$arr_type = "raw_attrs";
							else if( $cattrs[ $ch_cond_attr ] == 3 )
								$arr_type = "bus_attrs";
							else if( $cattrs[ $ch_cond_attr ] == 4 )
								$arr_type = "va_attrs";
							else if( $cattrs[ $ch_cond_attr ] == 5 )
								$arr_type = "moi_ps";

							if( isset($cmoi_ent[$arr_type][ $ch_cond_attr ]) )
							{
								$child_cond_attr_arr [ $ch_cond_attr ] = $cmoi_ent[$arr_type][ $ch_cond_attr ];
							}
							else
							{
								$child_cond_attr_arr [ $ch_cond_attr ] = null;
							}
						}

						$child_cond_resp = self::execute_cond( $child_cond_obj, $tran_cond_arr );
						if( !$child_cond_resp->valid )
						{
							break;
							$resp->valid = false;
							$resp->message = "Invalid Configs-CD52.";
							return $resp;
						}

						if( $child_cond_resp->result == false )
						{
							continue;
						}

						$arr_type = null;
						if( $cattrs[ $child_sel_attr ] == 1 )
							$arr_type = "sys_labels";
						else if( $cattrs[ $child_sel_attr ] == 2 )
							$arr_type = "raw_attrs";
						else if( $cattrs[ $child_sel_attr ] == 3 )
							$arr_type = "bus_attrs";
						else if( $cattrs[ $child_sel_attr ] == 4 )
							$arr_type = "va_attrs";
						else if( $cattrs[ $child_sel_attr ] == 5 )
							$arr_type = "moi_ps";

						if( isset($cmoi_ent[$arr_type][ $child_sel_attr ]) )
						{
							if( !isset($child_moc_lkp [$child_ppath]) )
								$child_moc_lkp [$child_ppath] = array();

							$child_moc_lkp [$child_ppath] [ $cmoi_ent["id"] ] = $cmoi_ent[$arr_type][ $child_sel_attr ];
						}
					}

					foreach ($moi_data as $moiid => $moi_ent)
					{
						$pppath = null;
						$moi_pcs = array();

						$allf = true;
						foreach ($thispath as $pm)
						{
							if( isset($moi_ent["moi_parts"][$pm["name"]]) )
							{
								$moi_pcs [] = $pm["name"]."=".$moi_ent["moi_parts"][$pm["name"]];
							}
							else
							{
								$allf = false;
								break;
							}
						}

						if( $allf )
						{
							$pppath = implode(",", $moi_pcs);
						}
						else
						{
							continue;
						}

						if( isset($child_moc_lkp[$pppath]) )
						{
							if( $attr["child_moc_aggr_fun"] == "child_moi_count" )
							{
								$moi_data [$moiid][ "va_attrs" ][ $attrl ] = sizeof($child_moc_lkp[$pppath]);
							}
							else if( $attr["child_moc_aggr_fun"] == "uniqe_attr_count" )
							{
								$moi_data [$moiid][ "va_attrs" ][ $attrl ] = sizeof(array_unique(array_map('trim', $child_moc_lkp[$pppath])));
							}
							else if( $attr["child_moc_aggr_fun"] == "child_attr_min" )
							{
								$moi_data [$moiid][ "va_attrs" ][ $attrl ] = min(array_map('floatval', $child_moc_lkp[$pppath]));
							}
							else if( $attr["child_moc_aggr_fun"] == "child_attr_max" )
							{
								$moi_data [$moiid][ "va_attrs" ][ $attrl ] = max(array_map('floatval', $child_moc_lkp[$pppath]));
							}
							else if( $attr["child_moc_aggr_fun"] == "child_attr_avg" )
							{
								$moi_data [$moiid][ "va_attrs" ][ $attrl ] = array_sum(array_map('floatval', $child_moc_lkp[$pppath])) / sizeof($child_moc_lkp[$pppath]);
							}
							else if( $attr["child_moc_aggr_fun"] == "child_attr_csv" )
							{
								$moi_data [$moiid][ "va_attrs" ][ $attrl ] = implode(",", array_unique(array_map('trim', $child_moc_lkp[$pppath])));								
							}
						}
						else
						{
							if( $attr["child_moc_aggr_fun"] == "child_moi_count" || $attr["child_moc_aggr_fun"] == "uniqe_attr_count" )
							{
								$moi_data [$moiid][ "va_attrs" ][ $attrl ] = 0;
							}
						}
					}

					$vattrs [ $attrl ] ["computed_populated"] = true;
				}
				else
				{
					$resp->valid = false;
					$resp->message = "Invalid Configs-CD12.";
					return $resp;
				}
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-CD7.";
				return $resp;
			}
		}
		else if( $attr["type"] == 6 )
		{
			// System Search Label
			if( isset($attr["search_template"]) && isset($attr["search_attr_arr"]) )
			{
				foreach ($attr["search_attr_arr"] as $search_attr)
				{
					if( isset($mmoc_attrs[ $search_attr["attr"] ]) && $mmoc_attrs[ $search_attr["attr"] ] == 4 )
					{
						$va_in_resp = self::va_get_attr($mmoc, $vattrs[ $search_attr["attr"] ], $search_attr["attr"], $moi_data, $deps, $vattrs, $mmoc_attrs, $moc_list_all_lkp, $mc_lkp, $pmoc_path, $cids_list, $domain_id, $vendor_id );
						if( !$va_in_resp->valid )
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-EDSN42: ".$search_attr["attr"];
							return $resp;
						}
						else
						{
							$vattrs [ $search_attr["attr"] ] ["computed_populated"] = true;
						}
					}
				}


				foreach ($moi_data as $moiid => $moi_ent)
				{
					$srch_temp = $attr["search_template"];
					$allf = true;

					foreach ($attr["search_attr_arr"] as $search_attr)
					{
						if( isset($mmoc_attrs[ $search_attr["attr"] ]) )
						{
							if( $mmoc_attrs[ $search_attr["attr"] ] == 1 )
							{
								if( isset($moi_ent[ "sys_labels" ][ $search_attr["attr"] ]) )
								{
									$srch_temp = str_replace($search_attr["inst"], $moi_ent["sys_labels"][ $search_attr["attr"] ], $srch_temp);
								}
								else
								{
									$allf = false;
								}
							}
							else if( $mmoc_attrs[ $search_attr["attr"] ] == 2 )
							{
								if( isset($moi_ent[ "raw_attrs" ][ $search_attr["attr"] ]) )
								{
									$srch_temp = str_replace($search_attr["inst"], $moi_ent["raw_attrs"][ $search_attr["attr"] ], $srch_temp);
								}
								else
								{
									$allf = false;
								}
							}
							else if( $mmoc_attrs[ $search_attr["attr"] ] == 3 )
							{
								if( isset($moi_ent[ "bus_attrs" ][ $search_attr["attr"] ]) )
								{
									$srch_temp = str_replace($search_attr["inst"], $moi_ent["bus_attrs"][ $search_attr["attr"] ], $srch_temp);
								}
								else
								{
									$allf = false;
								}
							}
							else if( $mmoc_attrs[ $search_attr["attr"] ] == 4 )
							{
								if( isset($moi_ent[ "va_attrs" ][ $search_attr["attr"] ]) )
								{
									$srch_temp = str_replace($search_attr["inst"], $moi_ent["va_attrs"][ $search_attr["attr"] ], $srch_temp);
								}
								else
								{
									$allf = false;
								}
							}
							else if( $mmoc_attrs[ $search_attr["attr"] ] == 5 )
							{
								if( isset($moi_ent[ "moi_ps" ][ $search_attr["attr"] ]) )
								{
									$srch_temp = str_replace($search_attr["inst"], $moi_ent["moi_ps"][ $search_attr["attr"] ], $srch_temp);
								}
								else
								{
									$allf = false;
								}
							}
						}
						else
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-EDSN35: ".$search_attr["attr"];
							return $resp;
						}
					}

					if( $allf )
					{
						$moi_data [$moiid][ "sys_labels" ][ "SYSTEM_SEARCH_LABEL" ] = $srch_temp;
					}
				}
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-EDSN3: SYSTEM_SEARCH_LABEL";
				return $resp;
			}
		}
		else if( $attr["type"] == 7 )
		{
			// System User Label
			if( isset($attr["display_template"]) && isset($attr["display_attr_arr"]) )
			{
				foreach ($attr["display_attr_arr"] as $display_attr)
				{
					if( isset($mmoc_attrs[ $display_attr["attr"] ]) && $mmoc_attrs[ $display_attr["attr"] ] == 4 )
					{
						$va_in_resp = self::va_get_attr($mmoc, $vattrs[ $display_attr["attr"] ], $display_attr["attr"], $moi_data, $deps, $vattrs, $mmoc_attrs, $moc_list_all_lkp, $mc_lkp, $pmoc_path, $cids_list, $domain_id, $vendor_id );
						if( !$va_in_resp->valid )
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-EDSN43: ".$display_attr["attr"];
							return $resp;
						}
						else
						{
							$vattrs [ $display_attr["attr"] ] ["computed_populated"] = true;
						}
					}
				}

				foreach ($moi_data as $moiid => $moi_ent)
				{
					$disp_temp = $attr["display_template"];
					$allf = true;

					foreach ($attr["display_attr_arr"] as $display_attr)
					{
						if( isset($mmoc_attrs[ $display_attr["attr"] ]) )
						{
							if( $mmoc_attrs[ $display_attr["attr"] ] == 1 )
							{
								if( isset($moi_ent[ "sys_labels" ][ $display_attr["attr"] ]) )
								{
									$disp_temp = str_replace($display_attr["inst"], $moi_ent["sys_labels"][ $display_attr["attr"] ], $disp_temp);
								}
								else
								{
									$allf = false;
								}
							}
							else if( $mmoc_attrs[ $display_attr["attr"] ] == 2 )
							{
								if( isset($moi_ent[ "raw_attrs" ][ $display_attr["attr"] ]) )
								{
									$disp_temp = str_replace($display_attr["inst"], $moi_ent["raw_attrs"][ $display_attr["attr"] ], $disp_temp);
								}
								else
								{
									$allf = false;
								}
							}
							else if( $mmoc_attrs[ $display_attr["attr"] ] == 3 )
							{
								if( isset($moi_ent[ "bus_attrs" ][ $display_attr["attr"] ]) )
								{
									$disp_temp = str_replace($display_attr["inst"], $moi_ent["bus_attrs"][ $display_attr["attr"] ], $disp_temp);
								}
								else
								{
									$allf = false;
								}
							}
							else if( $mmoc_attrs[ $display_attr["attr"] ] == 4 )
							{
								if( isset($moi_ent[ "va_attrs" ][ $display_attr["attr"] ]) )
								{
									$disp_temp = str_replace($display_attr["inst"], $moi_ent["va_attrs"][ $display_attr["attr"] ], $disp_temp);
								}
								else
								{
									$allf = false;
								}
							}
							else if( $mmoc_attrs[ $display_attr["attr"] ] == 5 )
							{
								if( isset($moi_ent[ "moi_ps" ][ $display_attr["attr"] ]) )
								{
									$disp_temp = str_replace($display_attr["inst"], $moi_ent["moi_ps"][ $display_attr["attr"] ], $disp_temp);
								}
								else
								{
									$allf = false;
								}
							}
						}
						else
						{
							$resp->valid = false;
							$resp->message = "Invalid Configs-EDSN39: ".$display_attr["attr"];
							return $resp;
						}
					}

					if( $allf )
					{
						$moi_data [$moiid][ "sys_labels" ][ "SYSTEM_USER_LABEL" ] = $disp_temp;
					}
				}
			}
			else
			{
				$resp->valid = false;
				$resp->message = "Invalid Configs-EDSN40: SYSTEM_USER_LABEL";
				return $resp;
			}
		}
		else
		{
			$resp->valid = false;
			$resp->message = "Invalid Configs-ED15.";
			return $resp;
		}

		return $resp;
	}

	public static function getmocsunder($moc, $full_moc_list, &$ids_list)
	{
		$ids_list [ $moc->id ] = $moc->name;
		$level_child = self::getchildids($moc, $full_moc_list);

		foreach ($level_child as $child) 
		{
			self::getmocsunder($child, $full_moc_list, $ids_list);
		}
	}

	public static function getchildids($moc, $full_moc_list)
	{
		$childarr = array();
		
		foreach ($full_moc_list as $cmoc)
		{
			if( $cmoc->parent_id == $moc->id)
				$childarr [] = $cmoc;
		}
		return $childarr;
	}

	public static function get_all_attributes($moc, $full_moc_list)
	{
		$mc_lkp = array();

		$attrs = array();
		$attrs ["SYSTEM_MOI"] = 1;
		$attrs ["RAW_DATA_LABEL"] = 1;
		$attrs ["SYSTEM_USER_LABEL"] = 1;
		$attrs ["SYSTEM_SEARCH_LABEL"] = 1;

		if( isset($moc->parameter_labels) )
		{
			$pmlbls = json_decode($moc->parameter_labels, true);
			foreach ($pmlbls as $pmlbl)
			{
				$attrs [$pmlbl] = 2;
			}
		}
		if( isset($moc->business_ref_labels) )
		{
			$brlbls = json_decode($moc->business_ref_labels, true);
			foreach ($brlbls as $brlbl)
			{
				$attrs [$brlbl] = 3;
			}
		}
		if( isset($moc->virtual_attributes) )
		{
			$valbls = json_decode($moc->virtual_attributes, true);
			foreach ($valbls as $valbl => $vaconfig)
			{
				$attrs [$valbl] = 4;
			}
		}

		foreach ($full_moc_list as $fmoc)
		{
			if( !isset($mc_lkp[$fmoc->id]) )
			{
				$mc_lkp[$fmoc->id] = array(
					"name" => $fmoc->name,
					"parent_id" => $fmoc->parent_id,
				);
			}
		}

		$moc_path = array();
		if( isset($mc_lkp[$moc->id]) )
		{
			$moc_path[] = array(
				"id" => $moc->id,
				"name" => $moc->name,
			);

			$parent_tlkf = $mc_lkp[$moc->id]["parent_id"];
			while ( $parent_tlkf != null && isset($mc_lkp[$parent_tlkf]) )
			{
				$moc_path[] = array(
					"id" => $parent_tlkf,
					"name" => $mc_lkp[$parent_tlkf]["name"],
				);

				$parent_tlkf = $mc_lkp[$parent_tlkf]["parent_id"];
			}
		}

		foreach ($moc_path as $pmc)
		{
			if( $pmc["name"] == "ems_data_source" )
			{
				$attrs ["SYSTEM_SOURCE_EMS"] = 5;
			}
			else
			{
				$attrs ["SYSTEM_MOIP_".$pmc["name"]] = 5;
			}
		}

		return $attrs;
	}

	public static function get_moc_path($moc, $full_moc_list)
	{
		$mc_lkp = array();

		foreach ($full_moc_list as $fmoc)
		{
			if( !isset($mc_lkp[$fmoc->id]) )
			{
				$mc_lkp[$fmoc->id] = array(
					"name" => $fmoc->name,
					"parent_id" => $fmoc->parent_id,
				);
			}
		}

		$moc_path = array();
		if( isset($mc_lkp[$moc->id]) )
		{
			$moc_path[] = array(
				"id" => $moc->id,
				"name" => $moc->name,
			);

			$parent_tlkf = $mc_lkp[$moc->id]["parent_id"];
			while ( $parent_tlkf != null && isset($mc_lkp[$parent_tlkf]) )
			{
				$moc_path[] = array(
					"id" => $parent_tlkf,
					"name" => $mc_lkp[$parent_tlkf]["name"],
				);

				$parent_tlkf = $mc_lkp[$parent_tlkf]["parent_id"];
			}
		}

		usort($moc_path, function($a, $b)
		{
			if ($a['id']==$b['id']) return 0;
			return ($a['id'] < $b['id']) ? -1 : 1;
		});

		return $moc_path;
	}

	public static function execute_cond($qb_obj, $val_arr)
	{
		$resp = new stdClass;
		$resp->valid = true;
		$resp->message = "";
		$resp->result = false;

		try
		{
			$resp->result = self::external_cond($qb_obj, $val_arr);
			$resp->valid = true;
		}
		catch(Exception $e)
		{
			$resp->valid = false;
			$resp->message = $e->getMessage()." (".$e->getLine().") ";
		}

		return $resp;
	}

	public static function external_cond($condition_obj, $val_arr)
	{
		$condition_resp = false;
		if( isset($condition_obj->condition) && isset($condition_obj->rules) )
		{
			if( sizeof($condition_obj->rules) > 0 )
			{
				$first = true;
				foreach ($condition_obj->rules as $nested_rule)
				{
					if ( $condition_obj->condition == "AND")
					{
						if($first == true)
						{
							$condition_resp = self::external_cond($nested_rule, $val_arr);
							$first = false;
						}
						else
						{
							$condition_resp = $condition_resp && self::external_cond($nested_rule, $val_arr);
						}
					}
					else if ( $condition_obj->condition == "OR")
					{
						if($first == true)
						{
							$condition_resp = self::external_cond($nested_rule, $val_arr);
							$first = false;
						}
						else
						{
							$condition_resp = $condition_resp || self::external_cond($nested_rule, $val_arr);
						}
					}
					else //Empty is AND
					{
						throw new Exception("Invalid Condition Found in Filter Description");	
					}
				}
			}
			else
			{
				$condition_resp = true;
			}
		}
		else if( isset($condition_obj->id) && isset($condition_obj->operator) )
		{
			$condition_resp = self::execute_cond_part($condition_obj, $val_arr);
		}
		else
		{
			throw new Exception("Invalid Element Found in Filter Description");
		}
		return $condition_resp;
	}

	public static function execute_cond_part($rule, $val_arr)
	{
		$cond_res = false;
		if( isset($rule->id) && isset($rule->operator) )
		{
			if ( $rule->operator == "atr_equal_to" )
			{
				if( isset($rule->value) )
				{
					if( isset($val_arr[$rule->id]) )
					{
						$cond_res = ( $val_arr[$rule->id] == $rule->value ) ? true : false;
					}
					else
					{
						$cond_res = false;
					}
				}
				else
				{
					throw new Exception("Invalid Value Found in Filter Description");
				}
			}
			else if ( $rule->operator == "atr_greater_then" )
			{
				if( isset($rule->value) )
				{
					if( isset($val_arr[$rule->id]) )
					{
						$cond_res = ( floatval($val_arr[$rule->id]) > floatval($rule->value) ) ? true : false;
					}
					else
					{
						$cond_res = false;
					}
				}
				else
				{
					throw new Exception("Invalid Value Found in Filter Description");
				}
			}
			else if ( $rule->operator == "atr_less_then" )
			{
				if( isset($rule->value) )
				{
					if( isset($val_arr[$rule->id]) )
					{
						$cond_res = ( floatval($val_arr[$rule->id]) < floatval($rule->value) ) ? true : false;
					}
					else
					{
						$cond_res = false;
					}
				}
				else
				{
					throw new Exception("Invalid Value Found in Filter Description");
				}
			}
			else if ( $rule->operator == "atr_starts_with" )
			{
				if( isset($rule->value) )
				{
					if( isset($val_arr[$rule->id]) )
					{
						$cond_res = ( substr( (string)$val_arr[$rule->id], 0, strlen((string)$rule->value) ) === (string)$rule->value ) ? true : false;
					}
					else
					{
						$cond_res = false;
					}
				}
				else
				{
					throw new Exception("Invalid Value Found in Filter Description");
				}
			}
			else if ( $rule->operator == "atr_ends_with" )
			{
				if( isset($rule->value) )
				{
					if( isset($val_arr[$rule->id]) )
					{
						$cond_res = ( substr( (string)$val_arr[$rule->id], -strlen((string)$rule->value) ) === (string)$rule->value ) ? true : false;
					}
					else
					{
						$cond_res = false;
					}
				}
				else
				{
					throw new Exception("Invalid Value Found in Filter Description");
				}
			}
			else if ( $rule->operator == "atr_is_contains" )
			{
				if( isset($rule->value) )
				{
					if( isset($val_arr[$rule->id]) )
					{
						$cond_res = ( strpos((string)$val_arr[$rule->id], (string)$rule->value) !== false ) ? true : false;
					}
					else
					{
						$cond_res = false;
					}
				}
				else
				{
					throw new Exception("Invalid Value Found in Filter Description");
				}
			}
			else if ( $rule->operator == "atr_is_not_contains" )
			{
				if( isset($rule->value) )
				{
					if( isset($val_arr[$rule->id]) )
					{
						$cond_res = ( strpos((string)$val_arr[$rule->id], (string)$rule->value) === false ) ? true : false;
					}
					else
					{
						$cond_res = false;
					}
				}
				else
				{
					throw new Exception("Invalid Value Found in Filter Description");
				}
			}
			else if ( $rule->operator == "atr_is_empty" )
			{
				if( isset($val_arr[$rule->id]) )
				{
					$cond_res = ( trim($val_arr[$rule->id]) == "" ) ? true : false;
				}
				else
				{
					$cond_res = false;
				}
			}
			else if ( $rule->operator == "atr_is_null" )
			{
				if( isset($val_arr[$rule->id]) )
				{
					$cond_res = false;
				}
				else
				{
					$cond_res = true;
				}
			}
			else
			{
				throw new Exception("Invalid Operator Found in Filter Description");
			}
		}
		else
		{
			throw new Exception("Invalid Element Found in Filter Description");	
		}
		return $cond_res;
	}
}
